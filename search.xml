<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[简历]]></title>
      <url>%2F2016%2F11%2F30%2F%E7%AE%80%E5%8E%86%2F</url>
      <content type="text"><![CDATA[一、个人基本资料姓名:程艳先 联系电话:18335908257 求职意向:WEB前端工程师 邮箱:18335908257@163.com 二、教育背景2012.9-2016.6 院校:运城学院 学历:本科 专业:电子科学与技术 在校主修课程: Photoshop图像处理 动态网页制作 FLASH动画设计 C语言程序设计 微机原理 三、项目经验 a.2016.7-2016.8 WEB界面设计 技术支持:Photoshop+Adobe_Illustrator+Hbuilder +JavaScript+jQuery 1、用PS,Ai设计网页制作设计稿, 并进行切图,进行网页布局排版 2、应用Hbuilder+Html+css将设计稿敲到网页上,并兼容各种浏览器 3、参照WEB界面设计规范,对网页进行调整,用JavaScript,Jquery实现简单的交互效果. 4、项目包括:京东购物平台,淘宝某网店,Apple官网 b.2016.8-2016.9 Fullpages以及移动端开发 技术支持:jQuery+HTML5+Css3+ Fullpages+Swipper+Iscroll 1、应用:jQuery+HTML5+Css3等技术进行网页设计,实现更多动画效果,增加网站的交互性 2、应用Fullpages+Swipper+Iscroll等框架进行移动端网页设计,实现不同移动端的适应 3、项目包括:KeyBoard团队项目,聚美移动端APP c.2016.9-2016.10 响应式开发 技术支持:Bootstrap+AmazeUI+materialize+Angular.js 1、应用Bootstrap+AmazeUI+materialize+Angular.js等框架进行网页响应式开发 2、应用以上框架设计PC端网页及移动端网页 3、项目包括:悦旅行(Bootstrap),华为消费者官网(AmazeUI),个人简历(materialize),后台管理(Bootstrap),言色APP(AmazeUI) 四、项目展示 个人简历网页版 ：https://benchuziwu.github.io/resume/resume.html 华为:建立全连接的世界 ：https://benchuziwu.github.io/resume/resume.html 更多项目正在持续更新中,敬请期待! 五、技能证书CET-4 计算机二级; 运城学院计算机设计大赛PPT设计优秀奖; 获得国家励志奖学金,国家助学金,学院奖学金,优秀团员,优秀毕业生等; 六、自我评价1、熟悉HTML5+CSS3布局，JavaScript，jQuery,可进行PC端及移动端网页制作； 2、熟练使用Bootstrap，Amaze UI、Angular、Materialize、Iscroll、Swiper等框架; 3、熟悉Ajax技术,掌握Jsonp跨域; 4、熟悉Sass预处理器编译CSS代码，使用TortoiseSVN/github进行团队合作; 5、熟练使用Hbuild,Sublime等前端开发工具,以及PS/AI等图像处理软件；]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2016%2F10%2F05%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post 1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[SSH入门教程]]></title>
      <url>%2F2016%2F10%2F05%2FSSH%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%2F</url>
      <content type="text"><![CDATA[SSH使用指南介绍SSH什么 是SSH？传统的网络服务程序，如：ftp、pop和telnet在本质上都是不安全的，因为它们在网络上用明文传送口令和数据，别有用心的人非 常容易就可以截获这些口令和数据。而且，这些服务程序的安全验证方式也是有其弱点的，就是很容易受到“中间人”（man-in-the-middle）这 种方式的攻击。所谓 “中间人”的攻击方式，就是“中间人”冒充真正的服务器接收你的传给服务器的数据，然后再冒充你把数据传给真正的服务器。服务器和你之间的数据传送被“中 间人”一转手做了手脚之后，就会出现很严重的问题。SSH的英文全称是Secure SHell。通过使用SSH，你可以把所有传输的数据进行加密，这样“中间人”这种攻击方式就不可能实现了，而且也能够防止DNS和IP欺骗。还有一个额 外的好处就是传输的数据是经过压缩的，所以可以加快传输的速度。SSH有很多功能，它既可以代替telnet，又可以为ftp、pop、甚至ppp提供一 个安全的“通道”。 最初SSH是由芬兰的一家公司开发的。但是因为受版权和加密算法的限制，现在很多人都转而使用OpenSSH。 OpenSSH是SSH的替代软件，而且是免费的，可以预计将来会有越来越多的人使用它而不是SSH。 SSH是由客户端和服务端的软件组 成的，有两个不兼容的版本分别是：1.x和2.x。用SSH 2.x的客户程序是不能连接到SSH 1.x的服务程序上去的。OpenSSH 2.x同时支持SSH 1.x和2.x。 SSH的安全验证是如何工作的从客户端来看，SSH提供两种级别的安全验证。 第 一种级别（基于口令的安全验证）只要你知道自己帐号和口令，就可以登录到远程主机。所有传输的数据都会被加密，但是不能保证你正在连接的服务器就是你想连 接的服务器。可能会有别的服务器在冒充真正的服务器，也就是受到“中间人”这种方式的攻击。 第二种级别（基于密匙的安全验证）需要依靠密 匙，也就是你必须为自己创建一对密匙，并把公用密匙放在需要访问的服务器上。如果你要连接到SSH服务器上，客户端软件就会向服务器发出请求，请求用你的 密匙进行安全验证。服务器收到请求之后，先在你在该服务器的家目录下寻找你的公用密匙，然后把它和你发送过来的公用密匙进行比较。如果两个密匙一致，服务 器就用公用密匙加密“质询”（challenge）并把它发送给客户端软件。客户端软件收到“质询”之后就可以用你的私人密匙解密再把它发送给服务器。 用 这种方式，你必须知道自己密匙的口令。但是，与第一种级别相比，第二种级别不需要在网络上传送口令。 第二种级别不仅加密所有传送的数据， 而且“中间人”这种攻击方式也是不可能的（因为他没有你的私人密匙）。但是整个登录的过程可能需要10秒。 安装并测试OpenSSH因 为受到美国法律的限制，在很多Linux的发行版中都没有包括OpenSSH。但是，可以从网络上下载并安装OpenSSH（有关OpenSSH的安装和 配置请参考：http://www.linuxaid.com.cn/engineer/brimmer/html/OpenSSH.htm）。 安 装完OpenSSH之后，用下面命令测试一下： ssh -l [your accountname on the remote host] [address of the remote host] 如果OpenSSH工作正常，你会看到下面的提示信息： The authenticity of host [hostname] can’t be established.Key fingerprint is 1024 5f:a0:0b:65:d3:82:df:ab:44:62:6d:98:9c:fe:e9:52.Are you sure you want to continue connecting (yes/no)? OpenSSH告诉你它不知 道这台主机，但是你不用担心这个问题，因为你是第一次登录这台主机。键入“yes”。这将把这台主机的“识别标记”加到“~/.ssh /know_hosts”文件中。第二次访问这台主机的时候就不会再显示这条提示信息了。 然后，SSH提示你输入远程主机上你的帐号的口 令。输入完口令之后，就建立了SSH连接，这之后就可以象使用telnet那样使用SSH了。 SSH的密匙生成你自己的密匙对生 成并分发你自己的密匙有两个好处： 1) 可以防止“中间人”这种攻击方式 2) 可以只用一个口令就登录到所有你想登录的服务器上 用下面的命令可以生成密匙： ssh-keygen 如果 远程主机使用的是SSH 2.x就要用这个命令： ssh-keygen –d 在同一台主机上同时有SSH1和SSH2的 密匙是没有问题的，因为密匙是存成不同的文件的。 ssh-keygen命令运行之后会显示下面的信息： Generating RSA keys: ……………………….ooooooO……ooooooOKey generation complete.Enter file in which to save the key (/home/[user]/.ssh/identity):[按下ENTER就行了]Created directory ‘/home/[user]/.ssh’.Enter passphrase (empty for no passphrase):[输 入的口令不会显示在屏幕上]Enter same passphrase again:[重新输入一遍口令，如果忘记了口令就只能重新生 成一次密匙了]Your identification has been saved in /home/[user]/.ssh/identity.[这是你的私人密匙]Your public key has been saved in /home/[user]/.ssh/identity.pub.The key fingerprint is: 2a:dc:71:2f:27:84:a2:e4:a1:1e:a9:63:e2:fa:a5:89 [user]@[local machine] “ssh-keygen –d”做的是几乎同样的事，但是把一对密匙存为（默认情况下）“/home/[user]/.ssh/id_dsa”（私人密匙）和“/home /[user]/.ssh/id_dsa.pub”（公用密匙）。 现在你有一对密匙了：公用密匙要分发到所有你想用ssh登录的远程主机 上去；私人密匙要好好地保管防止别人知道你的私人密匙。用“ls –l ~/.ssh/identity”或“ls –l ~/.ssh/id_dsa”所显示的文件的访问权限必须是“-rw——-”。 如果你怀疑自己的密匙已经被别人知道了，不要迟疑 马上生成一对新的密匙。当然，你还要重新分发一次公用密匙。 分发公用密匙在每一个你需要用SSH连接的远程服务器上，你要在自己 的家目录下创建一个“.ssh”的子目录，把你的公用密匙“identity.pub” 拷贝到这个目录下并把它重命名为“authorized_keys”。然后执行： chmod 644 .ssh/authorized_keys 这一步是必不可少的。如果除了你之外别人对“authorized_keys”文件也有写的权 限，SSH就不会工作。 如果你想从不同的计算机登录到远程主机，“authorized_keys”文件也可以有多个公用密匙。在这种情 况下，必须在新的计算机上重新生成一对密匙，然后把生成的“identify.pub”文件拷贝并粘贴到远程主机的“authorized_keys”文 件里。当然在新的计算机上你必须有一个帐号，而且密匙是用口令保护的。有一点很重要，就是当你取消了这个帐号之后，别忘了把这一对密匙删掉。 配 置SSH配置客户端的软件OpenSSH有三种配置方式：命令行参数、用户配置文件和系统级的配置文件（“/etc/ssh /ssh_config”）。命令行参数优先于配置文件，用户配置文件优先于系统配置文件。所有的命令行的参数都能在配置文件中设置。因为在安装的时候没 有默认的用户配置文件，所以要把 “/etc/ssh/ssh_config”拷贝并重新命名为“~/.ssh/config”。 标准的 配置文件大概是这样的： [lots of explanations and possible options listed] Be paranoid by defaultHost *ForwardAgent noForwardX11 noFallBackToRsh no 还有很多选项的设置可以用“man ssh”查看“CONFIGURATION FILES”这一章。 配置文件是 按顺序读取的。先设置的选项先生效。 假定你在www.foobar.com上有一个名为“bilbo”的帐号。而且你要把“ssh- agent”和“ssh-add”结合起来使用并且使用数据压缩来加快传输速度。因为主机名太长了，你懒得输入这么长的名字，用“fbc”作为 “www.foobar.com”的简称。你的配置文件可以是这样的： Host *fbcHostName www.foobar.comUser bilboForwardAgent yesCompression yes Be paranoid by defaultHost *ForwardAgent noForwardX11 noFallBackToRsh no 你输入“ssh fbc”之后，SSH会自动地从配置文件中找到主机的全名，用你的用户名登录并且用“ssh-agent”管理的密匙进行安全验证。这样很方便吧！ 用 SSH连接到其它远程计算机用的还是“paranoid（偏执）”默认设置。如果有些选项没有在配置文件或命令行中设置，那么还是使用默认的 “paranoid”设置。 在我们上面举的那个例子中，对于到www.foobar.com的SSH连接：“ForwardAgent” 和“Compression”被设置为 “Yes”；其它的设置选项（如果没有用命令行参数）“ForwardX11”和“FallBackToRsh”都被设置成“No”。 其 它还有一些需要仔细看一看的设置选项是： l CheckHostIP yes 这个选项用来进行IP地址的检查以防止 DNS欺骗。 l CompressionLevel 压缩的级别从“1”（最快）到“9”（压缩率最高）。默认值为 “6”。 l ForwardX11 yes 为了在本地运行远程的X程序必须设置这个选项。 l LogLevel DEBUG 当SSH出现问题的时候，这选项就很有用了。默认值为“INFO”。 配置服务端的软件SSH 服务器的配置使用的是“/etc/ssh/sshd_config”配置文件，这些选项的设置在配置文件中已经有了一些说明而且用“man sshd”也可以查看帮助。请注意OpenSSH对于SSH 1.x和2.x没有不同的配置文件。 在默认的设置选项中需要注意的有： l PermitRootLogin yes 最好把这个选项设置成“PermitRootLogin without-password”，这样“root”用户就不能从没有密匙的计算机上登录。把这个选项设置成“no”将禁止“root”用户登录，只能 用“su”命令从普通用户转成“root”。 l X11Forwarding no 把这个选项设置成“yes”允许用户 运行远程主机上的X程序。就算禁止这个选项也不能提高服务器的安全因为用户可以安装他们自己的转发器（forwarder），请参看“man sshd”。 l PasswordAuthentication yes 把这个选项设置为“no”只允许用户用基于密匙 的方式登录。这当然会给那些经常需要从不同主机登录的用户带来麻烦，但是这能够在很大程度上提高系统的安全性。基于口令的登录方式有很大的弱点。 l # Subsystem /usr/local/sbin/sftpd 把最前面的＃号去掉并且把路径名设置成“/usr/bin /sftpserv”，用户就能使用“sftp”（安全的FTP）了（sftpserv在 sftp软件包中）。因为很多用户对FTP比较熟悉而且“scp”用起来也有一些麻烦，所以“sftp”还是很有用的。而且2.0.7版本以后的图形化的 ftp工具“gftp”也支持“sftp”。 拷贝文件用“scp”拷贝文件SSH提供了一些命令和shell用来登录 远程服务器。在默认情况下它不允许你拷贝文件，但是还是提供了一个“scp”命令。 假定你想把本地计算机当前目录下的一个名为 “dumb”的文件拷贝到远程服务器www.foobar.com上你的家目录下。而且你在远程服务器上的帐号名为“bilbo”。可以用这个命令： scp dumb bilbo@www.foobar.com:. 把文件拷贝回来用这个命令： scp bilbo@www.foobar.com:dumb . “scp”调用SSH进行登录，然后拷贝文件，最后调用SSH关闭这个连接。 如 果在你的“~/.ssh/config”文件中已经为www.foobar.com做了这样的配置： Host *fbcHostName www.foobar.comUser bilboForwardAgent yes 那么你就可以用“fbc”来代替 “bilbo@www.foobar.com”，命令就简化为“scp dumb fbc:.”。 “scp”假定你在远程主机上的家目录 为你的工作目录。如果你使用相对目录就要相对于家目录。 用“scp”命令的“-r”参数允许递归地拷贝目录。“scp”也可以在两个不同 的远程主机之间拷贝文件。 有时候你可能会试图作这样的事：用SSH登录到www.foobar.com上之后，输入命令“scp [local machine]:dumb .”想用它把本地的“dumb”文件拷贝到你当前登录的远程服务器上。这时候你会看到下面的出错信息： ssh: secure connection to [local machine] refused 之所以会出现这样的出错信息是因为你运行 的是远程的“scp”命令，它试图登录到在你本地计算机上运行的SSH服务程序……所以最好在本地运行“scp”除非你的本地计算机也运行SSH服务程 序。 用“sftp”拷贝文件如果你习惯使用ftp的方式拷贝文件，可以试着用“sftp”。“sftp”建立用SSH加密的安全 的FTP连接通道，允许使用标准的ftp命令。还有一个好处就是“sftp”允许你通过“exec”命令运行远程的程序。从2.0.7版以后，图形化的 ftp客户软件“gftp”就支持“sftp”。 如果远程的服务器没有安装sftp服务器软件“sftpserv”，可以把 “sftpserv”的可执行文件拷贝到你的远程的家目录中（或者在远程计算机的$PATH环境变量中设置的路径）。“sftp”会自动激活这个服务软 件，你没有必要在远程服务器上有什么特殊的权限。 用“rsync”拷贝文件“rsync”是用来拷贝、更新和移动远程和本地文件 的一个有用的工具，很容易就可以用“-e ssh”参数和SSH结合起来使用。“rsync”的一个优点就是，不会拷贝全部的文件，只会拷贝本地目录和远程目录中有区别的文件。而且它还使用很高效 的压缩算法，这样拷贝的速度就很快。 用“加密通道”的ftp拷贝文件如果你坚持要用传统的FTP客户软件。SSH可以为几乎所有 的协议提供“安全通道”。FTP是一个有一点奇怪的协议（例如需要两个端口）而且不同的服务程序和服务程序之间、客户程序和客户程序之间还有一些差别。 实 现“加密通道”的方法是使用“端口转发”。你可以把一个没有用到的本地端口（通常大于1000）设置成转发到一个远程服务器上，然后只要连接本地计算机上 的这个端口就行了。有一点复杂是吗？ 其实一个基本的想法就是，转发一个端口，让SSH在后台运行，用下面的命令： ssh [user@remote host] -f -L 1234:[remote host]:21 tail -f /etc/motd 接 着运行FTP客户，把它设置到指定的端口： lftp -u [username] -p 1234 localhost 当 然，用这种方法很麻烦而且很容易出错。所以最好使用前三种方法。 用SSH设置“加密通道”“加密通道”的基础知识SSH 的“加密通道”是通过“端口转发”来实现的。你可以在本地端口（没有用到的）和在远程服务器上运行的某个服务的端口之间建立“加密通道”。然后只要连接到 本地端口。所有对本地端口的请求都被SSH加密并且转发到远程服务器的端口。当然只有远程服务器上运行SSH服务器软件的时候“加密通道”才能工作。可以 用下面命令检查一些远程服务器是否运行SSH服务： telnet [full name of remote host] 22 如 果收到这样的出错信息： telnet: Unable to connect to remote host: Connection refused 就说明远程服务器上没有运行SSH服务软件。 端口转发使用这样的命令语法： ssh -f [username@remote host] -L [local port]:[full name of remote host]:[remote port] [some command] 你不仅可以转发多个端口而且可以在“~/.ssh /config”文件中用“LocalForward”设置经常使用的一些转发端口。 为POP加上“加密通道”你可以用POP协 议从服务器上取email。为POP加上“加密通道”可以防止POP的密码被网络监听器（sniffer）监听到。还有一个好处就是SSH的压缩方式可以 让邮件传输得更快。 假定你在pop.foobar.com上有一个POP帐号，你的用户名是“bilbo”你的POP口令是 “topsecret”。用来建立SSH“加密通道”的命令是： ssh -f -C bilbo@pop.foobar.com -L 1234:pop.foobar.com:110 sleep 5 （如果要测试，可以把“sleep”的值加到500）。运行这个命令之 后会提示你输入POP口令： bilbo@pop.foobar.com’s password: 输入口令之后就可以用 “telnet”连接到本地的转发端口了。 telnet localhost 1234 你会收到远程mail服务器的 “READY”消息。 当然，这个方法要求你手工输入所有的POP命令，这是很不方便的。可以用Fetchmail（参考how to configure Fetchmail）。Secure POP via SSH mini-HOWTO、man fetchmail和在“/usr/doc/fetchmail-[…]”目录下的Fetchmail的FAQ都提供了一些具体的例子。 请 注意IMAP协议使用的是不同的端口：IMAP v2的端口号为143而IMAP v3的端口号为220。 为X加上“加密通道”如 果你打算在本地计算机上运行远程SSH服务器上的X程序，那么登录到远程的计算机上，创建一个名为“~/.ssh/environment”的文件并加上 这一行： XAUTHORITY=/home/[remote user name]/.Xauthority （如果在远 程主机上你的家目录下不存在“.Xauthority”这个文件，那么当用SSH登录的时候就会自动创建）。 比如启动一个X程序 （xterm）可以这个命令： ssh -f -X -l [remote user name] [remote machine] xterm 这将在远程运行xterm这个程序。其它的X程序也是用相同的方法。 为linuxconf加上“加密通道”Linuxconf 是Linux的配置工具，它支持远程管理。Linuxconf的FAQ重说明了如何通过SSH使用linuxconf： 其命令为： remadmin –exec [link_command] linuxconf –guiproto 如果你想在两台计算机之间用加密的方式传送信 息，那么最好用ssh。命令是： remadmin –exec ssh -l [account] linuxconf –guiproto 这是非常有效的而且运行用图形界面管理计算机。 这种方法需要在客户端安装linuxconf。其它 的方法还有直接登录到服务器上用“X11Forwarding”或字符界面运行linuxconf。 为Webmin加上“加密通道”Webmin 是一个新的基于浏览器的配置工具。它运行在1000端口。你可以用SSH的“端口转发”对它进行加密： ssh -f -l [remote user name] [remote host] -L 1234:[remote host]:10000 tail -f /etc/motd 把浏览器指向 http://localhost:1234‘转载自：http://www.unlinux.com/doc/ssh/20051027 /5368.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[git使用教程与基本原理]]></title>
      <url>%2F2016%2F10%2F05%2Fgit%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%E4%B8%8E%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%2F</url>
      <content type="text"><![CDATA[1、什么是GIT Git是一个强调速度的分布式版本控制软件和源代码管理系统（SCM，source code management）。Git最初是由Linus Torvalds为内核开发而设计的管理软件。自从Git推出以来，已经被很多开源项目所采纳。每一个Git工作目录是一个带有完全历史记录和版本信息的仓库，不依赖于网络和中央服务器。Git是一个免费的开源软件，遵从GNU v2协议。 Git这个词在英语中的原意是很笨拙，没用的人。Linus自嘲说：“我是一个任性的笨蛋，所以我把我的所有的项目的名字都和我很相似。第一个是Linux，现在是Git。”Git的帮助文档中描述Git为：笨拙的内容跟踪者（the stupid content tracker）。(翻译自WIKI) 关于开发Git的一些历史由来，可以看看这个网站：https://lkml.org/lkml/2005/4/6/1212、为什么要用GIT 更顺畅的工作流程，开发过程中，完全可以离线操作 快速，Git分布式架构使得本地仓库包含所有的历史版本信息，你可以在不同的版本之间快速切换 弹性的本地分支，在svn下，你建一个分支需要把源代码复制到另外一个文件夹，而在Git下，创建分支的代价是非常小的，只需一条命令 仓库目录结构简洁，用Git复制一个项目，只会在项目根目录创建一个.git的目录，而其他目录很干净 内容按元数据方式存储，所有的版本信息都位于.git目录下 完整性好，更易于协作开发 用户群大，现在已经有成千上万个开源项目采用Git来做项目管理，github上更是有无数个代码仓库 3、GIT安装与配置 a) 安装 1.从源码安装 在安装之前，你必须保证以下几个依赖包已经安装在你的系统上：curl, zlib, openssl, expat, libiconv。如果你的系统是Ubuntu，你可以这样安装： apt-get install curl-devel expat-devel gettext-devel openssl-devel zlib-devel 当所有的依赖项已经解决，就可以从http://git-scm.com/download上下载Git的源码，然后编译安装，具体命令如下： tar -zxf git-1...*.tar.gz cd git-1.. make prefix=/usr/local all sudo make prefix=/usr/local install 2.在Linux上安装 如果你的系统是Linux或者Fedora，你可以通过以下命令直接安装Git： yum install git-core (fedora) apt-get install git-core (ubuntu) 3.在Windows上安装 尽管Git是发源于Linux，但现在Windows上也有能够正常使用Git，只不过不支持中文，在Windows下所有的中文都显示问号，另外还有一些功能上的BUG。所以建议还是在Linux上去使用Git，如果你不得不工作在Windows上，你可以到http://msysgit.github.com/上下载msysgit的最新版，安装过程和其他Windows程序差不多，基本上点下一步就OK了。Msysgit默认会安装git bash和git GUI这两个程序，一般用git bash就可以了，它支持常用的命令。如果对Linux命令行不熟，你也可以用用git GUI，但功能有限制。 b) 第一次使用GIT 在你安装好Git之后，你需要修改一些配置，才能正常使用Git。 Git通过“git config”命令来配置Git，这个命令有2个选项：–system, –global, 加上默认选项，分别对应Git上3级配置文件。第一个是/etc/gitconfig文件，和–system对应，这是全局配置文件，修改这个文件，将会影响系统上所有的用户，所有的仓库。第二个是你家目录下的/.gitconfig文件，与–global对应，修改它会对你当前用户的所有仓库产生影响。第三个是你仓库中的.git/.gitconfig文件，这是“git config”默认修改的配置文件，它只会对你当前仓库产生影响。 在第一次使用Git时，你需要告诉你的协同开发者，你是谁以及你的邮箱，在你提交的时候，Git需要这两个信息。具体通过以下命令设置： git config –global user.name “Test OSS” git config –global user.email oss.lzu.edu.cn@gmail.com 当然你也可以不用–global选项，但这意味这你在每一个仓库中都要这样设置。 同时，你也可以指定你的编辑器，你的Diff工具： git config –global core.editor vim git config –global merge.tool vimdiff 你还可以通过”git config –list”命令来查看你的设置。 当你把Git设置好之后，如果你要和从Git服务器上获得仓库，或者向Git服务器提交你的代码（比如github），你可能需要生成你自己的ssh密钥对。Git支持4种与服务器端通信的协议：git、http、ssh和https。其中git只是一个只读协议，也就是说你只可以从服务器端获取仓库，但是你不能提交你自己的代码。而http和https用的很少，大部分都只支持ssh协议和Git协议。 当你通过ssh协议与远端服务器进行通信的时候，你可以通过以下命令生成ssh密钥对： ssh-keygen -t rsa 如果你没有指定密钥名称和存放路径的话，它默认把两个不对称密钥放在你的家目录下的.ssh目录下，密钥文件默认名称为id_rsa和id_rsa.pub，前者是私钥，后者是公钥。中间可能会要你设定访问密钥密码，这个可以设，可以不设，但为了安全考虑，还是建议你设一个访问密码。否则，意味着任何持有你密钥的人都可以使用该密钥。 然后把你的公钥发给Git仓库管理员，然后你就可以通过ssh协议来访问服务器端，期间程序会自动进行密钥对匹配，如果你设了访问密码，你可能需要输入密码。 更多关于ssh的内容，请访问这里：http://www.freebsd.org/doc/zh_CN/books/handbook/openssh.html 这些设定完之后，你可以通过获得任何一个公开的代码仓库来检测你的git是否工作正常。比如下面这个： git clone git://git2.kernel.org/pub/scm/git/git.git 4、GIT仓库 Git做为一个资源管理和跟踪系统，如果想要把自己的文件托管在Git上，那么首先你得让Git知道你需要管理的文件在哪。比如说现在我有一个项目，它在test文件夹里，我想让Git管理这个项目，这个时候你需进入到这个目录，然后运行“git init”命令。这个时候Git就会在该目录下生成一个.git的隐藏目录，Git用来进行版本控制和内容跟踪的所有文件都在该文件夹下。 处于git跟踪下的文件只具有三种状态： Modified(working directory)：被修改过的文件 Staged(staging area)：通过git add添加到暂存区域的文件 Committed(git directory)：通过git commit提交到仓库的文件 所以，一般的git工作流程可能是这样：修改过某些文件，然后把这些文件添加都暂缓区，再提交到仓库中形成一个版本或快照，最后提交到git服务器上。而在中间，可能伴随着分支管理，分支切换，撤消与合并。 可能有些人会觉得很奇怪，为什么git会有暂存区域这个概念，直接提交到仓库中不就ok了。其实这是git为了做版本控制用的，试想如果没有暂存区域，每修改一个文件，就会形成一个版本，太过频繁，不易于管理。暂存区域其实就是下一个版本的文件清单，你可以自由控制该往仓库中提交什么文件，这也可以避免在一个版本中包含一些中间文件，比如编译后的文件。 5、GIT基本流程 1.初始化仓库 初始化仓库有两种情况，一种是直接在一个空目录里建立一个项目，这时候你可以这样干： git init 另一种是从其他机器复制一个仓库，比如这样： git clone git://git2.kernel.org/pub/scm/git/git.git (远程仓库) git clone https://github.com/jQuery/jquery.git (远程仓库) git clone git@github.com:wengpingbo/MicroBlog.git (远程仓库) git clone /home/oss/test.git (本地仓库) 第一次从服务器上复制一个仓库，可能比较慢，因为git要把所有的历史记录和版本全部复制下来，这也算git的一个弊端吧！ 复制完后，就会在当前目录下生成一个工作目录，名字以仓库名字命名。如果你不想指定目录，那就在上面的命令后加一个目录就ok了。比如我想把test仓库放到oss仓库中：git clone /home/oss/test.git oss 之后，你就可以开始你的工作啦！ 2.添加文件 在编辑了几个文档之后，你可能突然想起来，好像文件还没有让git跟踪。Git并不会实时的跟踪你的文件，只在你明确让它记录你的文件时，它才会把指定的文件的当前状态记录到仓库中去，然后又撒手不管了。我想这就是说git笨的原因吧。这个时候，你需要手动添加你的文件当暂存区域： git add filename1 filename2 如果你懒得一个一个加，你可以试试这个： git add -A 它会把当前目录下所有的文件都添加到暂存区域。 3.添加一个版本 在添加完文件后，你可能觉得应该创建一个commit了。 git commit 怎么样？是不是有点不对劲，好像这个命令并没有按你想象的那样跳出一个提交成功的提示，而是直接跑到了你在配置中指定的编辑器中了。仔细看一下，原来是让你给这个版本做一些备注，随便写点什么，然后保存退出就ok了。如果你不想这么麻烦，可以这么干： git commit -m ‘initial version’ 可能你觉得之前讲的太罗嗦了，提交一个commit还这么麻烦，其实有一个捷径可以使你跳过添加文件这个过程： git commit -a -m ‘initial version’ 大功告成，这个命令会把之前所有的已经添加的文件都加入到这个版本中。 可能你又有疑问了，之前添加的文件不是自动会加入到下一个版本中吗，问什么还加这个-a参数？ 其实git add命令只是把指定文件的当前状态添加到暂存区域，并不代表一个文件一旦添加，就会一直存在每个版本中。如果你添加一个文件后对这个又进行了修改，在你commit时候，只会commit这个文件添加时的状态，不会把之后的修改也commit进去，除非你再次添加。 4.推送变更 在你commit完之后，你可能想把自己的代码提交到github或者其他git服务器上，与他人交流共享，这时候就需要和远程服务器打交道了。 如果你是在本地建立起的仓库，默认情况下是没有任何服务器地址的，如果你是从其他服务器复制过来的仓库，这个服务器地址会自动添加到你的仓库中，你可以这样查看： git remote -v 如果只输入”git remote”，就只会列出服务器端的别名，不会列出地址来。 一个仓库可以有多个服务器地址，这就意味着，你可以从不同的人手中复制同一个仓库，但这并不会打乱你自己的分支，哪怕双方的分支名字都一样。假如你现在在和另外两个人做同一个项目中的同一个分支，你发现A的一个模块正是你想要的，你想把他的代码合并到你现在的版本中，这时候你可以这样做： git remote add code_a git://url/test.git //添加对方的地址,code_a是别名 git fetch code_a //复制对方的仓库到本地，但不合并，git pull会自动合并 git merge code_a/master //把对方master分支合并到自己当前版本下 合并完之后，你可能想提交你的代码到其他的服务器上，这时候你可以先把要提交的服务器地址添加进来，然后这样做： git push origin master 上面的命令就是把自己master的分支提交到名字为origin的服务器上 5.创建并管理分支 在做项目的时候，你可能会想写一些扩展性的功能，或者做一些小实验，但是你又不想影响你现在的项目。这时候，你可以创建一个分支，然后在这个分支里写东西，当觉得不好的时候，你可以把这个分支删除掉，对你之前的主分支没有任何影响。或者你觉得这个新特性超出了自己的预想，可以合并到主分支里，这时候你只要把工作转回主分支，然后合并分支，最后删除分支，然后就跟那个分支没创建一样。具体操作如下： git branch test //创建一个test分支 git checkout test //转到test分支 edit something…commit something… git checkout master //转到master分支 git merge test //合并test分支 git checkout -b test2 //创建test2分支，并转到test2分支 git branch -d test //删除test分支 git branch //列出分支列表 git branch -v //列出分支列表和当前commit Git merge的实质是把两个版本合在一起，然后在当前分支创建一个新的commit，如果你在两个分支的同一个文件的同一个地方都做了修改，这时候merge就会失败，git就不会自动创建一个新的commit，而是直接停住。你需要手动修改这些冲突的文件，选择这两个分支中的一个版本，或者自己重写这个部分，然后手动添加这些文件到暂存区域，再commit一下就ok了。要查看哪些文件冲突了，可以用”git status”查看。 6.撤消改动 是人就会犯错。当你执行某个命令之后，突然发现，自己写错了，或者漏了一个文件，这时候怎么办？ 如果你提交得太早，忘了添加某些文件，你可以这样做： git commit -m ‘add something ’ git add file1 git commit –amend 最后一个命令会把你当前暂存区域最为上一次的commit。如果你commit以后，马上amend，这时候git会直接跳到编辑commit备注里面，这样你可以修改你上次commit的备注。 如果你添加了不该添加的文件，你可以这样挽回： git add . //把所有的文件都添加进去 git reset HEAD readme //把readme文件从暂存区域去除 如果你发现你编辑错了一个文件，你想把它恢复到上一个版本的状态，这时候你可以这样： git checkout – filename1 //只撤消这一个文件 如果你觉得这个版本糟糕透了，想完全回滚到上一个版本，你可以干如下事情： git reset –hard HEAD^ HEAD是指向当前版本，^指当前版本的父版本，这个操作无法撤消。你可以把–hard换成–soft，这只会回退commit信息。还有一个–mixed默认选项，大家可以参考官方文档，查看这3个选项的具体区别。 6、GIT常用命令 Git add Git clone Git commit Git push Git checkout Git reset Git pull Git status Git branch //advanced Git tag Git log Git merge 7、学习GIT相关资料 《pro git》 ：http://git-scm.com/book/zh 《git magic》 ：http://www.csc.kth.se/utbildning/kth/kurser/DD2385/material/gitmagic.pdf Git manual ：http://git-scm.com/docs]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Mysql常用命令行操作]]></title>
      <url>%2F2016%2F10%2F04%2FMysql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C%2F</url>
      <content type="text"><![CDATA[http://www.cnblogs.com/bzys/archive/2013/01/20/2869029.html 一、从命令行登录MySQL数据库服务器 1、登录使用默认3306端口的MySQL /usr/local/mysql/bin/mysql -u root -p 2、通过TCP连接管理不同端口的多个MySQL（注意：MySQL4.1以上版本才有此项功能）/usr/local/mysql/bin/mysql -u root -p –protocol=tcp –host=localhost –port=3307 3、通过socket套接字管理不同端口的多个MySQL /usr/local/mysql/bin/mysql -u root -p –socket=/tmp/mysql3307.sock 4、通过端口和IP管理不同端口的多个MySQL /usr/local/mysql/bin/mysql -u root -p -P 3306 -h 127.0.0.1 二、数据库操作SQL语句 1、显示服务器上当前存在什么数据库 SHOW DATABASES; 2、创建名称为rewin的数据库 CREATE DATABASE rewin; 3、删除名称为rewin的数据库 DROP DATABASE rewin; 4、选择rewin数据库 USE rewin; 三、表操作SQL语句（登录之后必须用以上的USE命令选择一个数据库，再进行表操作） 1、显示当前数据库中存在什么表 SHOW TABLES; 2、创建数据库表zhangyan：在mysql&gt;后粘贴以下SQL语句，存储引擎为MYISAM，字段id为主键、唯一索引 。 CREATE TABLE zhangyan ( id INT( 5 ) UNSIGNED NOT NULL AUTO_INCREMENT , username VARCHAR( 20 ) NOT NULL , password CHAR( 32 ) NOT NULL , time DATETIME NOT NULL , number FLOAT( 10 ) NOT NULL , content TEXT NOT NULL , PRIMARY KEY ( id ) ) ENGINE = MYISAM ; 3、查看zhangyan表结构 DESCRIBE zhangyan; 4、从表中检索信息 4.1、从zhangyan表中检索所有记录 SELECT * FROM zhangyan; 4.2、从zhangyan表中检索特定的行：字段username等于abc，字段number等于1，按字段id降序排列 SELECT * FROM zhangyan WHERE username = abc AND number=1 ORDER BY id DESC; 4.3、从zhangyan表中检索指定的字段：username和password SELECT username, password FROM zhangyan; 4.4、从zhangyan表中检索出唯一的不重复记录： SELECT DISTINCT username FROM zhangyan; 5、插入信息到zhangyan表 INSERT INTO zhangyan (id, username, password, time, number, content) VALUES (, abc, 123456, 2007-08-06 14:32:12, 23.41, hello world); 6、更新zhangyan表中的指定信息 UPDATE zhangyan SET content = hello china WHERE username = abc; 7、删除zhangyan表中的指定信息 DELETE FROM zhangyan WHERE id = 1; 8、清空zhangyan表 DELETE FROM zhangyan; 9、删除zhangyan表 DROP TABLE zhangyan; 10、更改表结构，将zhangyan表username字段的字段类型改为CHAR(25) ALTER TABLE zhangyan CHANGE username username CHAR(25); 11、将当前目录下的mysql.sql导入数据库 SOURCE ./mysql.sql; 四、数据库权限操作SQL语句 1、创建一个具有root权限，可从任何IP登录的用户sina，密码为zhangyan GRANT ALL PRIVILEGES ON . TO sina@% IDENTIFIED BY zhangyan; 2、创建一个具有”数据操作”、”结构操作”权限，只能从192.168.1.*登录的用户sina，密码为zhangyan GRANT SELECT , INSERT , UPDATE , DELETE , FILE , CREATE , DROP , INDEX , ALTER , CREATE TEMPORARY TABLES , CREATE VIEW , SHOW VIEW , CREATE ROUTINE, ALTER ROUTINE, EXECUTE ON . TO sina@192.168.1.% IDENTIFIED BY zhangyan; 3、创建一个只拥有”数据操作”权限，只能从192.168.1.24登录，只能操作rewin数据库的zhangyan表的用户 sina，密码为zhangyan GRANT SELECT , INSERT , UPDATE , DELETE ON rewin.zhangyan TO sina@192.168.1.24 IDENTIFIED BY zhangyan; 4、创建一个拥有”数据操作”、”结构操作”权限，可从任何IP登录，只能操作rewin数据库的用户sina，密码为 zhangyan GRANT SELECT , INSERT , UPDATE , DELETE , CREATE , DROP , INDEX , ALTER , CREATE TEMPORARY TABLES , CREATE VIEW , SHOW VIEW , CREATE ROUTINE, ALTER ROUTINE, EXECUTE ON rewin.* TO sina@% IDENTIFIED BY zhangyan; 5、删除用户 DROP USER sina@%; 6.MySQL中将字符串aaa批量替换为bbb的SQL语句 UPDATE 表名 SET 字段名 = REPLACE (字段名, aaa, bbb); 7.修复损坏的表 ①、用root帐号从命令行登录MySQL： mysql -u root -p ②、输入root帐号的密码。 ③、选定数据库名（本例中的数据库名为student）： use student; ④、修复损坏的表（本例中要修复的表为smis_user_student）： repair table smis_user_student;udent;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[项目模板]]></title>
      <url>%2F2016%2F10%2F04%2F%E9%A1%B9%E7%9B%AE%E6%A8%A1%E6%9D%BF%2F</url>
      <content type="text"><![CDATA[shurnim-storage 目录 背景介绍 项目介绍 使用说明 获取代码 开发插件 使用ShurnimStorage接口 接口介绍 使用样例 其他 背景介绍Shurnim，是我和我老婆曾经养过的一只仓鼠的名字。shurnim-storage，是一个插件式云存储/网盘同步管理工具。是在参加又拍云开发大赛的过程中设计并开发。 项目介绍shurnim-storage 的设计初衷是给大家提供一个可方便扩展的云存储/网盘同步工具。分后端接口和前端UI界面两部分。 由于目前各种云存储和网盘系统层出不穷，单一工具往往支持支持某几个特定存储之间的同步，如又拍云到七牛云存储的同步工具，此时如若想同步到其他存则可能需要新的工具，给用户带来不便。shurnim-storage 正是为了解决此问题而设计的。 在shurnim-storage中，用户使用的固定的统一的后端接口。而所有云存储/网盘API的支持则是以插件的形式部署到系统中的。如此，如果用户想要一个从又拍云到Dropbox的同步工具，则只需要在原有基础上，增加Dropbox的插件，即可实现互通，方便快捷。 同时，后端统一接口的设计也考虑到界面开发的需求，可直接通过后端提供的接口开发具有上述扩展功能的云存储UI工具。 目前，后端整体框架的核心部分已经基本开发完成。只需逐步补充后端接口和插件开发接口的定义即可。但由于个人时间和能力所限，UI部分没有开发，有兴趣的同学可以一试。 使用说明 获取代码 gitcafe项目主页: https://gitcafe.com/onecoder/shurnim-storage-for-UPYUN OSChina项目主页: http://git.oschina.net/onecoder/shurnim-storageOSChina上的会持续更新。 另外你也可以通过OSChina的Maven库获取依赖，或者自己编译jar包。 maven 加入OSC仓库 &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;nexus&lt;/id&gt; &lt;name&gt;local private nexus&lt;/name&gt; &lt;url&gt;http://maven.oschina.net/content/groups/public/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;/repositories&gt; 加入依赖 &lt;dependency&gt; &lt;groupId&gt;com.coderli&lt;/groupId&gt; &lt;artifactId&gt;shurnim-storage&lt;/artifactId&gt; &lt;version&gt;0.1-alpha&lt;/version&gt; &lt;/dependency&gt; Gradle 编译Jar 在项目目录执行 gradle jar 开发插件在shurnim-storage中，插件就像一块一块的积木，不但支撑着框架的功能，也是框架可扩展性的基石。开发一个插件，仅需两步： 实现PluginAPI接口 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677package com.coderli.shurnim.storage.plugin;import java.io.File;import java.util.List;import com.coderli.shurnim.storage.plugin.model.Resource;/*** 各种云存储插件需要实现的通用接口** @author OneCoder* @date 2014年4月22日 下午9:43:41* @website http://www.coderli.com*/public interface PluginAPI &#123; /** * 初始化接口 * * @author OneCoder * @date 2014年5月19日 下午10:47:40 */ void init(); /** * 获取子资源列表 * * @param parentPath * @return * @author OneCoder * @date 2014年4月24日 下午11:29:14 */ List&lt;Resource&gt; getChildResources(String parentPath); /** * 下载特定的资源 * * @param parentPath * 目录路径 * @param name * 资源名称 * @param storePath * 下载资源保存路径 * @return * @author OneCoder * @date 2014年4月24日 下午11:30:19 */ Resource downloadResource(String parentPath, String name, String storePath); /** * 创建文件夹 * * @param path * 文件夹路径 * @param auto * 是否自动创建父目录 * @return * @author OneCoder * @date 2014年5月15日 下午10:10:04 */ boolean mkdir(String path, boolean auto); /** * 上传资源 * * @param parentPath * 父目录路径 * @param name * 资源名称 * @param uploadFile * 待上传的本地文件 * @return * @author OneCoder * @date 2014年5月15日 下午10:40:13 */ boolean uploadResource(String parentPath, String name, File uploadFile);&#125; 目前插件的接口列表仅为同步资源设计，如果想要支持更多操作(如删除，查找等)，可扩展该接口定义。接口中，所有的参数和返回值均为shurnim-storage框架中定义的通用模型。因此，您在开发插件过程中需要将特定SDK中的模型转换成接口中提供的模型。插件实现类只要与shurnim-storage工程在同一个classpath即可使用。您既可以直接在源码工程中开发插件，就如工程里提供的upyun和qiniu插件一样，也可以作为独立工程开发，打成jar，放置在同一个classpath下。upyun插件样例(功能不完整): 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136package com.coderli.shurnim.storage.upyun.plugin;import java.io.File;import java.util.List;import com.coderli.shurnim.storage.plugin.AbstractPluginAPI;import com.coderli.shurnim.storage.plugin.model.Resource;import com.coderli.shurnim.storage.plugin.model.Resource.Type;import com.coderli.shurnim.storage.upyun.api.UpYun;public class UpYunPlugin extends AbstractPluginAPI &#123; private UpYun upyun; private String username; private String password; private String bucketName; public UpYun getUpyun() &#123; return upyun; &#125; public void setUpyun(UpYun upyun) &#123; this.upyun = upyun; &#125; public String getUsername() &#123; return username; &#125; public void setUsername(String username) &#123; this.username = username; &#125; public String getPassword() &#123; return password; &#125; public void setPassword(String password) &#123; this.password = password; &#125; public String getBucketName() &#123; return bucketName; &#125; public void setBucketName(String bucketName) &#123; this.bucketName = bucketName; &#125; /* * (non-Javadoc) * * @see * com.coderli.shurnim.storage.plugin.PluginAPI#getChildResources(java.lang * .String) */ @Override public List&lt;Resource&gt; getChildResources(String parentPath) &#123; return null; &#125; /* * (non-Javadoc) * * @see * com.coderli.shurnim.storage.plugin.PluginAPI#downloadResource(java.lang * .String, java.lang.String, java.lang.String) */ @Override public Resource downloadResource(String parentPath, String name, String storePath) &#123; File storeFile = new File(storePath);// if (!storeFile.exists()) &#123;// try &#123;// storeFile.createNewFile();// &#125; catch (IOException e) &#123;// e.printStackTrace();// &#125;// &#125; String filePath = getFullPath(parentPath, name); upyun.readDir(&quot;/api&quot;); if (upyun.readFile(filePath, storeFile)) &#123; Resource result = new Resource(); result.setName(name); result.setPath(parentPath); result.setType(Type.FILE); result.setLocalFile(storeFile); return result; &#125; return null; &#125; String getFullPath(String parentPath, String name) &#123; if (!parentPath.endsWith(File.separator)) &#123; parentPath = parentPath + File.separator; &#125; return parentPath + name; &#125; /* * (non-Javadoc) * * @see com.coderli.shurnim.storage.plugin.PluginAPI#mkdir(java.lang.String, * boolean) */ @Override public boolean mkdir(String path, boolean auto) &#123; // TODO Auto-generated method stub return false; &#125; /* * (non-Javadoc) * * @see * com.coderli.shurnim.storage.plugin.PluginAPI#uploadResource(java.lang * .String, java.lang.String, java.io.File) */ @Override public boolean uploadResource(String parentPath, String name, File uploadFile) &#123; // TODO Auto-generated method stub return false; &#125; /* * (non-Javadoc) * * @see com.coderli.shurnim.storage.plugin.AbstractPluginAPI#init() */ @Override public void init() &#123; upyun = new UpYun(bucketName, username, password); &#125;&#125; 编写插件配置文件 12345678910111213141516&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;plugin&gt; &lt;id&gt;qiniu&lt;/id&gt; &lt;name&gt;七牛云存储&lt;/name&gt; &lt;api&gt; &lt;className&gt;com.coderli.shurnim.storage.qiniu.QiniuPlugin&lt;/className&gt; &lt;params&gt; &lt;param name=&quot;access_key&quot; displayName=&quot;ACCESS_KEY&quot;&gt;EjREKHI_GFXbQzyrKdVhhXrIRyj3fRC1s9UmZPZO &lt;/param&gt; &lt;param name=&quot;secret_key&quot; displayName=&quot;SECRET_KEY&quot;&gt;88NofFWUvkfJ6T6rGRxlDSZOQxWkIxY2IsFIXJLX &lt;/param&gt; &lt;param name=&quot;bucketName&quot; displayName=&quot;空间名&quot;&gt;onecoder &lt;/param&gt; &lt;/params&gt; &lt;/api&gt;&lt;/plugin&gt; id 为该插件在shurnim-storage框架下的唯一标识，不可重复，必填。 name 为显示值，为UI开发提供可供显示的有语义的值。 className 为插件接口实现类的完整路径。必填 params/param 为插件需要用户配置的参数列表。其中 name 代表参数名，需要与接口实现类中的参数名严格一致，且必须有相应的set方法的格式要求严格，即set+首字母大写的参数名。例如:setAccess_key(String arg); 目前只支持String类型的参数。 displayName 为参数显示名，同样是为了UI开发的考虑，方便用户开发出可根据参数列表动态显示的UI界面。 参数的值可以直接配置在配置文件中，也可以在运行期动态赋值。直接配置值，对于直接使用后端接口来说较为方便。对于UI开发来说，运行期动态赋值更为合理。 在使用源码工程时，插件配置文件统一放置在工程的plugins目录下。你也可以统一放置在任何位置。此时，在构造后端接口实例时，需要告知接口该位置。 使用ShurnimStorage接口 接口介绍ShurnimStorage接口是shurinm-storage框架全局的也是唯一的接口，目前定义如 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133package com.coderli.shurnim.storage;import java.util.List;import java.util.Map;import com.coderli.shurnim.storage.plugin.model.Plugin;import com.coderli.shurnim.storage.plugin.model.Resource;/*** 后台模块的全局接口&lt;br&gt;* 通过该接口使用后台的全部功能。&lt;br&gt;* 使用方式:&lt;br&gt;* &lt;li&gt;* 1.先通过&#123;@link #getSupportedPlugins()&#125;方法获取所有支持的平台/插件列表。 &lt;li&gt;* 2.将列表中返回的ID传入对应的接口参数中，进行对应的平台的相关操作。&lt;br&gt;* 需要注意的是，不同平台的插件需要给不同的参数赋值，该值可以直接配置在配置文件中。&lt;br&gt;* 也可以在运行期动态赋值。(会覆盖配置文件中的值。)&lt;br&gt;** 参数列表的设计，方便UI开发人员动态的根据参数列表生成可填写的控件。并给参数赋值。增强了可扩展性。** @author OneCoder* @date 2014年4月22日 下午9:21:58* @website http://www.coderli.com*/public interface ShurnimStorage &#123; /** * 获取当前支持的插件列表&lt;br&gt; * 没有支持的插件的时候可能返回null * * @return * @author OneCoder * @date 2014年5月7日 下午8:53:25 */ List&lt;Plugin&gt; getSupportedPlugins(); /** * 给指定的插件的对应参数赋值&lt;br&gt; * 此处赋值会覆盖配置文件中的默认值 * * @param pluginId * 插件ID * @param paramsKV * 参数键值对 * @author OneCoder * @date 2014年5月9日 上午12:41:53 */ void setParamValues(String pluginId, Map&lt;String, String&gt; paramsKV); /** * 获取插件对应目录下的资源列表 * * @param pluginId * 插件ID * @param path * 指定路径 * @return * @author OneCoder * @date 2014年5月11日 上午8:52:00 */ List&lt;Resource&gt; getResources(String pluginId, String path); /** * 同步资源 * * @param fromPluginId * 待同步的插件Id * @param toPluginIds * 目标插件Id * @param resource * 待同步的资源 * @return 同步结果 * @author OneCoder * @date 2014年5月11日 上午11:41:24 */ boolean sycnResource(String fromPluginId, String toPluginId, Resource resource) throws Exception;&#125;``` 当前接口实际仅包含了获取资源列表*getResources*和同步资源*sycnResource*功能，*getSupportedPlugins*和*setParamValues*实际为辅助接口，在UI开发时较为有用。&lt;br/&gt;&lt;br/&gt;同样，您也可以扩展开发该接口增加更多的您喜欢的特性。例如，同时删除给定存储上的文件。当然，这需要插件接口的配合支持。&lt;br/&gt;&lt;br/&gt;这里，*sycnResource*设计成插件间一对一的形式，是考虑到获取同步是否成功的结果的需求。如果您想开发一次同步到多个存储的功能，建议您重新开发您自己的接口实现类，因为默认实现会多次下次资源(每次同步后删除)，造成网络资源的浪费。接口的默认实现类是: **DefaultShurnimStorageImpl**&lt;a name=&quot;使用样例&quot;&gt;&lt;/a&gt;#### 使用样例``` package com.coderli.shurnim.test.shurnimstorage;import org.junit.Assert;import org.junit.BeforeClass;import org.junit.Test;import com.coderli.shurnim.storage.DefaultShurnimStorageImpl;import com.coderli.shurnim.storage.ShurnimStorage;import com.coderli.shurnim.storage.plugin.model.Resource;import com.coderli.shurnim.storage.plugin.model.Resource.Type;/*** 全局接口测试类&lt;br&gt;* 时间有限，目前仅作整体接口测试。细粒度的单元测试，随开发补充。** @author OneCoder* @date 2014年5月19日 下午10:50:27* @website http://www.coderli.com*/public class ShurnimStorageTest &#123; private static ShurnimStorage shurnim; @BeforeClass public static void init() &#123; shurnim = new DefaultShurnimStorageImpl( &quot;/Users/apple/git/shurnim-storage-for-UPYUN/plugins&quot;); &#125; @Test public void testSycnResource() &#123; Resource syncResource = new Resource(); syncResource.setPath(&quot;/api&quot;); syncResource.setName(&quot;api.html&quot;); syncResource.setType(Type.FILE); try &#123; Assert.assertTrue(shurnim.sycnResource(&quot;upyun&quot;, &quot;qiniu&quot;, syncResource)); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125; 其他时间仓促，功能简陋，望您包涵。OneCoder(Blog:http://www.coderli.com)特别希望看到该项目对您哪怕一点点的帮助。任意的意见和建议，欢迎随意与我沟通,联系方式： Email: &#x77;&#117;&#115;&#x68;&#x69;&#x6b;&#101;&#122;&#x75;&#x6f;&#64;&#x67;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109; QQ:57959968 Blog:OneCoder 项目的Bug和改进点，可在OSChina上以issue的方式直接提交给我。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[正则表达式]]></title>
      <url>%2F2016%2F10%2F04%2F%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
      <content type="text"><![CDATA[正则表达式直接量定义为包含在一对斜杠（/）之间的字符，例如：var pattern =/s$/;(即匹配以s结尾的字符串) 用构造函数RegExp（）也可以，例：var pattern = new RegExp(“s$”); ECMAScript 3规定：一个正则表达式直接量会在执行到它的时候转换为一个RegExp对象，同一段代码所表示的正则表达式直接量的每次运算都返回同一个对象。 ECMAScript 5规定：同一段代码的正则表达式直接量的每次运算都返回一个新的对象。例如，在Firefox 3.6中遵循的是ECMAScript 3规范，Firefox 4+中遵循的是ECMAScript 5规范，PS： 在ECMAScript 6 规范中，我还没有学习到最新关于正则表达式直接量的部分。（示例来自于《JavaScript权威指南》） 12345678910&lt;function getReg()&#123; var re = /[a-z]/; re.foo = 'bar'; return re;&#125;var reg = getReg();reg2 = getReg();console.log(reg === reg2);//在Firefox3.6中，true；在Firefox4+中，false；reg.foo = 'baz';console.log(reg2.foo);在Firefox3.6中，返回‘baz’；在Firefox4+中，返回‘bar’； ` tips: 如果想要在正则表达式中使用这些字符的直接量进行匹配，则必须使用前缀’\’，这是一条通行规则； 如果不记得哪些符号需要反斜杠转义，可以在每个标点符号前都加上反斜杠； 许多字母和数字在反斜杠作为前缀的时候有特殊含义 ,所以对想要按照直接量进行匹配的字母和数字，尽量不要用反斜杠对其进行转义； 要想在正则表达式中按照直接量匹配反斜线本身，则必须使用反斜杠将其转义。 字符类（character class)直接将字符单独放进方括号内就组成了字符类。一个字符类可以匹配它所包含的任意字符。 例如：/[abc]/,即匹配‘a’‘b’‘c’中的任意一个。 可以通过“^”符号来否定字符类，它匹配所有不包含在方括号内的字符。字符类可以使用连字符来表示字符范围。例如：/[a-z]/，即匹配小写拉丁字母；/[a-zA-Z0-9]/，即匹配拉丁字母和数字。 正则表达式的字符类 字符 匹配 […] 方括号内的任意字符 [^…] 不在方括号内的任意字符 . 除换行符和其他Unicode行终止符之外的任意字符 \w 任何ASCII字符组成的单词，等价于[a-zA-Z0-9_] \W 任何不是ASCII字符组成的单词，等价于[^a-zA-Z0-9_] \s 任何Unicode空白符 \S 任何非Unicode空白符的字符 \d 任何ASCII数字，等价于[0-9] \D 任何非ASCII数字，等价于[^0-9] [\b] 退格直接量（特列） 字符 匹配 {n,m} 匹配前一项至少n次，最多m次 {n,} 匹配前一项至少n次 {n} 匹配前一项n次 ？ 匹配前一项0或1次，即可选，等价于{0,1} 匹配前一项1或多次，即可选，等价于{1，} 匹配前一项0或多次，即可选，等价于{0,} 正则表达式 意义/\d{2,4}/ 匹配2-4个数字/\w{3}\d?/ 精确匹配三个单词和一个可选数字/\s+java\s+/ 匹配前后带有一个或者多个空格的字符串‘java’/[^(]*/ 匹配0个或者多个非左括号的字符 非贪婪匹配，只需在带匹配的字符后跟随一个问号，如：“？？”、“+？”、“*？”或者“{1,5}？”。使用非贪婪的匹配模式所得的结果可能与预期不同。如：/a+?b/，它匹配的是尽可能少的a和一个b。当它用来匹配“aaab”时，你希望它能匹配一个a和最后一个b，但实际上，这个模式缺匹配了整个字符串，该模式的匹配结果和贪婪一模一样。这是因为正则表达式的模式匹配总会寻找第一个可能不匹配的位置，由于该匹配是从该字符串中第一个字符开始，因为不考虑字符串中子串更短的匹配。 字符“|”用于分隔供选择的字符。例如： /ab|cd|ef/ 可以匹配”ab”或”cd”或”ef”，/\d{3}|[a-z]{4}/ 可以匹配三个数字或者死歌小写字母PS：选择项的尝试匹配次序是从左到右，直到发现了匹配项。如果左边的选择相匹配就忽略了右边的匹配项。例如： /a|ab/ 匹配字符串”ab“的时候，它只能匹配第一个字符‘a’。 正则表达式中圆括号的作用把单独的相组合成子表达式；在完整的模式中定义一个子模式。当一个正则表达式成功的和目标字符串相匹配的时，可以从目标串中抽取和圆括号中子模式相匹配的部分；带圆括号的表达式，允许在同一正则表达式的后部引用前面的自表达式。通过在字符”\“后加以为或者多位数字来实现。正则表达式的锚元素最常用的锚元素”^“用来匹配字符串的开始，”$“用以匹配字符串的结束。 ”（？：“和”）“仅仅用来分组，并不生成引用,即匹配不包括。 正则表达式中的锚字符字符 含义^ 匹配字符串的开头，在多行检索时，匹配一行的开头$ 匹配字符串的结尾，在多行检索中，匹配一行的结尾\b 匹配一个单词的边界\B 匹配非单词边界(?=p) 零宽正向先行断言，要求接下来的字符都与p匹配，但不包括P的那些字符(?!p) 零宽负向先行断言，要求接下来的字符都不与p匹配用于模式匹配的String方法 String.search()它的参数是一个正则表达式，返回第一个与之匹配的子串的起始位置，如果找不到匹配的子串，它将返回-1。search()方法不支持全局检索，因为它忽略正则表达式参数中的修饰符g。 String.replace()用以执行检索与替换操作。其中第一个参数是一个正则表达式，第二个参数是要进行替换的字符串。如果replace()的第一个参数不是正则表达式而是一个字符串的话，则直接搜索这个字符串，而不是像search（）一样先通过RegExp（）将它转换成正则表达式， String.match（）它的唯一参数是一个正则表达式，返回的是一个由匹配结果组成的数组。如果该正则表达式设置了修饰符g，则该方法返回的数组包含字符串中的所有匹配结果。即使match（）方法执行的不是全局检索，它返回的也是一个数组，在这种情况下，数组的第一个元素是匹配的字符串，余下的元素则是正则表达式中用圆括号括起来的子表达式。例如：使用如下代码解析一个URL： &lt;var url = /(\w+):\/\/([\w.]+)\/(\S*)/; var text = &#39;lalaal http://write.blog.csdn.net/mdeditor&#39;; var result = text.match(url); console.log(result);//chrome下运行结果：[&quot;http://write.blog.csdn.net/mdeditor&quot;, &quot;http&quot;, &quot;write.blog.csdn.net&quot;, &quot;mdeditor&quot;, index: 7, input: &quot;lalaal http://write.blog.csdn.net/mdeditor&quot;] console.log(result[0]);//http://write.blog.csdn.net/mdeditor console.log(result[1]);//http console.log(result[2]);//write.blog.csdn.net console.log(result[3]);//mdeditor console.log(result[4]);//undefined&gt; String.split()用以将调用它的字符串拆分为一个子串组成的数组。例如：console.log(‘lalaal http://write.blog.csdn.net/mdeditor&#39;.split(/\s|:|\.|\//));//chrome下运行结果：[“lalaal”, “http”, “”, “”, “write”, “blog”, “csdn”, “net”, “mdeditor”] 电子邮箱地址的正则表达式为： /^([\w-.]+)@([\w-.]+)[.][a-zA-Z]{2,4}$/或者/^([a-zA-Z0-9-.]+)@([a-zA-Z0-9-.]+)[.][a-zA-Z]{2,4}$/([-\w]+) .?匹配任何ASCII字符组成的单词（大小写字母和数字或’_’）或’-‘，一次或多次，可选符号’.’（即0次或者1次）(([-\w]+).?)+ 上述字符串的出现一次或者多次[a-z]{2,4}$ 结尾匹配域名后缀，2-4个小写字母。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Markdown语法]]></title>
      <url>%2F2016%2F10%2F04%2FMarkdown%E8%AF%AD%E6%B3%95%2F</url>
      <content type="text"><![CDATA[个人博客的生成过程:1.hexo s -g #生成静态网页,启动服务器,进行本地预览2.创建文章 hexo new “文章题目” 生成md文件(blog/source/_posts/)3.编写md文件4.hexo d发布更新博客,将本地文件发布到github上 标题设置在Markdown当中设置标题，有两种方式：第一种：通过在文字下方添加“=”和“-”，他们分别表示一级标题和二级标题。第二种：在文字开头加上 “#”，通过“#”数量表示几级标题。（一共只有1~6级标题，1级标题字体最大） Markdown一级标题Markdown二级标题 块注释（blockquote）通过在文字开头添加“&gt;”表示块注释。（当&gt;和文字之间添加五个blank时，块注释的文字会有变化。） 要注释的文字 前面有5个空格 斜体将需要设置为斜体的文字两端使用1个“*”或者“_”夹起来 文字倾斜 *文字倾斜 粗体将需要设置为斜体的文字两端使用2个“”或者“_”夹起来* 文字加粗 文字加粗在文字上添加删除线水平线 无序列表在文字开头添加(, +, and -)实现无序列表。但是要注意在(, +, and -)和文字之间需要添加空格。（建议：一个文档中只是用一种无序列表的表示方式） 无序列表1星号 无序列表2加号 无序列表3减号 有序列表使用数字后面跟上句号。（还要有空格） 有序列表 链接（Links）Markdown中有两种方式，实现链接，分别为内联方式和引用方式。内联方式：This is an example link.引用方式：I get 10 times more traffic from Google than from Yahoo or MSN. 图片（Images）图片的处理方式和链接的处理方式，非常的类似。内联方式：引用方式： 代码实现方式有两种：第一种：简单文字出现一个代码框。使用&lt;blockquote&gt;。（不是单引号而是左上角的ESC下面~中的）第二种：大片文字需要实现代码框。使用Tab和四个空格。 代码块高亮1&lt;code&gt; 脚注（footnote）实现方式如下：hello^hello 下划线在空白行下方添加三条“-”横线。（前面讲过在文字下方添加“-”，实现的2级标题） 表格表头 | 表头————- | ————-单元格内容 | 单元格内容单元格内容l | 单元格内容]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[奉上一大碗心灵鸡汤[C]]></title>
      <url>%2F2016%2F10%2F04%2F%E5%A5%89%E4%B8%8A%E4%B8%80%E5%A4%A7%E7%A2%97%E5%BF%83%E7%81%B5%E9%B8%A1%E6%B1%A4%2F</url>
      <content type="text"><![CDATA[我们总是太过理智，所以过得并不开心。当每件事情都细想前因后果、推算成败得失，生活不再有意外，也就难有惊喜了。 “没有经济上的独立，就缺少自尊，没有思考上的独立，就缺少自主，没有人格上的独立，就缺少自信。” 晚上少熬夜，躺在床上不要来回刷着手机了，越刷越孤独，胃不好就少吃辣椒冷饮过热的食物，容易发胖的体质管不住嘴就多运动，一个人待着时就看看书，好东西都值得花时间，所以无论你现在多辛苦也别放弃，想想已经坚持了多久才到这里，又是一年，还没人来牵你的手，请照顾好自己。 很多人分不清理想和欲望，理想就是当你想它时，你是快乐的；欲望就是当你想它时，你是痛苦的 时间上的距离也同样创造出幻象，希望永远都是在未来，你必须隔着一段时间的距离才能够看到它，它就像彩虹一样只能在远处被看到，但你无法真正捕捉到它。 我没想过要变得多强大，我只希望自己成为那种姑娘，不管经历过多少不平，有过多少伤痛，都舒展着眉头过日子，内心丰盛安宁，性格澄澈豁达。偶尔矫情却不矫揉造作，毒舌却不尖酸刻薄，不怨天尤人，不苦大仇深。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[this is my second post]]></title>
      <url>%2F2016%2F09%2F29%2Fthis-is-my-second-post%2F</url>
      <content type="text"><![CDATA[MOU overviewMou,the missing Markdown editor for ed developersSyntax*Strong and Emphasizestrong or strong (Cmd+B)Emphasize or Emphasize+(Cmd+I)Sometimes,I need a lot of text to be bold.Like,seriously,a LOT of text this is a line text 当行文本*Blokquotes Right angle brackets &gt; are used for blokquotes. ####Links and EmailAn email &#101;&#120;&#97;&#x6d;&#x70;&#108;&#x65;&#x40;&#x65;&#x78;&#x61;&#x6d;&#112;&#108;&#101;&#46;&#99;&#x6f;&#109; link.Simple inline link http://chenluois.com,another inline link Smaller,one more inline link with title [Resize]{http://resizesafari.com “a Safari extension”}.A reference stylelink,input id,then anywhere in the doc,define the link with correspong id:]]></content>
    </entry>

    
  
  
</search>
